{"ast":null,"code":"import axios from 'axios';\n/**\n * Frontend service which handles the communication with the backend\n */\n\nclass BookingDataService {\n  /**\n   * Fetches all bookings\n   * \n   * @returns JSON array of Booking objects\n   */\n  retrieveAllBookings() {\n    return axios.get(`http://localhost:8080/bookings`);\n  }\n  /**\n   * @returns A JSON array of booking objects\n   */\n\n\n  retrieveAllAvailableTimes() {\n    return axios.get(`http://localhost:8080/availableTimes`);\n  }\n  /**\n   * Fetches specific booking\n   * \n   * @param {Number} id\n   * @returns JSON object of a Booking\n   */\n\n\n  retrieveBooking(id) {\n    return axios.get(`http://localhost:8080/bookings/${id}`);\n  }\n  /**\n   * @todo update booking parameters\n   * Updates the specified booking object\n   * \n   * @param {Number} id \n   * @param booking JSON object of a booking containing id, BookingDate, numberOfPeople, email \n   */\n\n\n  updateBooking(id, booking) {\n    return axios.put(`http://localhost:8080/bookings/${id}`, booking);\n  }\n  /**\n   * Creates and adds new booking object\n   * \n   * Value of id should always be 0, as it will be assigned by the backend\n   * @param booking JSON object of a booking containing id, BookingDate, numberOfPeople, email\n   */\n\n\n  createBooking(booking) {\n    return axios.post(`http://localhost:8080/bookings`, booking);\n  }\n  /**\n   * Deletes the specified booking\n   * \n   * @param {Number} id\n   */\n\n\n  deleteBooking(id) {\n    return axios.delete(`http://localhost:8080/bookings/${id}`);\n  }\n\n}\n\nexport default new BookingDataService();","map":{"version":3,"sources":["/Users/idalinnakallio/Documents/GitHub/Nokia3310-DAT257/src/frontend/src/api/BookingDataService.js"],"names":["axios","BookingDataService","retrieveAllBookings","get","retrieveAllAvailableTimes","retrieveBooking","id","updateBooking","booking","put","createBooking","post","deleteBooking","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;;AACA,MAAMC,kBAAN,CAAyB;AACrB;AACJ;AACA;AACA;AACA;AACIC,EAAAA,mBAAmB,GAAG;AAClB,WAAOF,KAAK,CAACG,GAAN,CAAW,gCAAX,CAAP;AACH;AAED;AACJ;AACA;;;AACKC,EAAAA,yBAAyB,GAAG;AACzB,WAAOJ,KAAK,CAACG,GAAN,CAAW,sCAAX,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,eAAe,CAACC,EAAD,EAAK;AAChB,WAAON,KAAK,CAACG,GAAN,CAAW,kCAAiCG,EAAG,EAA/C,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,aAAa,CAACD,EAAD,EAAIE,OAAJ,EAAa;AACtB,WAAOR,KAAK,CAACS,GAAN,CAAW,kCAAiCH,EAAG,EAA/C,EAAkDE,OAAlD,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,aAAa,CAACF,OAAD,EAAU;AACnB,WAAOR,KAAK,CAACW,IAAN,CAAY,gCAAZ,EAA6CH,OAA7C,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACII,EAAAA,aAAa,CAACN,EAAD,EAAK;AACd,WAAON,KAAK,CAACa,MAAN,CAAc,kCAAiCP,EAAG,EAAlD,CAAP;AACH;;AAvDoB;;AA4DzB,eAAe,IAAIL,kBAAJ,EAAf","sourcesContent":["import axios from 'axios';\n\n/**\n * Frontend service which handles the communication with the backend\n */\nclass BookingDataService {\n    /**\n     * Fetches all bookings\n     * \n     * @returns JSON array of Booking objects\n     */\n    retrieveAllBookings() {\n        return axios.get(`http://localhost:8080/bookings`);\n    }\n\n    /**\n     * @returns A JSON array of booking objects\n     */\n     retrieveAllAvailableTimes() {\n        return axios.get(`http://localhost:8080/availableTimes`);\n    }\n\n    /**\n     * Fetches specific booking\n     * \n     * @param {Number} id\n     * @returns JSON object of a Booking\n     */\n    retrieveBooking(id) {\n        return axios.get(`http://localhost:8080/bookings/${id}`);\n    }\n\n    /**\n     * @todo update booking parameters\n     * Updates the specified booking object\n     * \n     * @param {Number} id \n     * @param booking JSON object of a booking containing id, BookingDate, numberOfPeople, email \n     */\n    updateBooking(id,booking) {\n        return axios.put(`http://localhost:8080/bookings/${id}`, booking);\n    }\n\n    /**\n     * Creates and adds new booking object\n     * \n     * Value of id should always be 0, as it will be assigned by the backend\n     * @param booking JSON object of a booking containing id, BookingDate, numberOfPeople, email\n     */\n    createBooking(booking) {\n        return axios.post(`http://localhost:8080/bookings`, booking);\n    }\n\n    /**\n     * Deletes the specified booking\n     * \n     * @param {Number} id\n     */\n    deleteBooking(id) {\n        return axios.delete(`http://localhost:8080/bookings/${id}`);\n    }\n\n\n}\n\nexport default new BookingDataService();"]},"metadata":{},"sourceType":"module"}